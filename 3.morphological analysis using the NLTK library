import nltk
from nltk.stem import WordNetLemmatizer

def morphological_analysis(sentence):
    # Tokenize the sentence
    tokens = nltk.word_tokenize(sentence)

    # Perform POS tagging
    pos_tags = nltk.pos_tag(tokens)

    # Initialize lemmatizer
    lemmatizer = WordNetLemmatizer()

    # Perform lemmatization with morphological analysis
    morphemes = []
    for word, pos_tag in pos_tags:
        # Map POS tags to WordNet POS tags
        wordnet_tag = get_wordnet_pos(pos_tag)
        
        # Lemmatize each word
        lemmatized_word = lemmatizer.lemmatize(word, wordnet_tag)
        
        # Append results to the morphemes list
        morphemes.append((word, lemmatized_word, pos_tag, wordnet_tag))

    return morphemes

def get_wordnet_pos(treebank_tag):
    if treebank_tag.startswith('J'):
        return nltk.corpus.reader.wordnet.ADJ
    elif treebank_tag.startswith('V'):
        return nltk.corpus.reader.wordnet.VERB
    elif treebank_tag.startswith('R'):
        return nltk.corpus.reader.wordnet.ADV
    else:
        return nltk.corpus.reader.wordnet.NOUN  # Default to NOUN if not found

# Get a sentence from the user
user_sentence = input("Enter a sentence for morphological analysis: ")

# Perform morphological analysis on the user-inputted sentence
analysis_result = morphological_analysis(user_sentence)

# Display the output
print("\nMorphological Analysis Results:")
print("{:<15} {:<15} {:<15} {:<15}".format("Word", "Lemmatized", "POS Tag", "WordNet POS"))
print("-" * 60)
for result in analysis_result:
    print("{:<15} {:<15} {:<15} {:<15}".format(result[0], result[1], result[2], result[3]))
